import solver, { Expr } from 'logic-solver';

export function getAllConstraints() {
  const constraints = [];

  // –ø—Ä–∏–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ—ö–∞: —Å–≤–∞–∫–∏ –µ–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏—ò–µ –º–æ–∂–µ –±–∏—Ç–∏ —Å–∞–º–æ —É —ò–µ–¥–Ω–æ—ò –∫–æ–ª–æ–Ω–∏
  const categories = ['–û—Å–æ–±–µ', '–ê—É—Ç–æ–º–æ–±–∏–ª–∏', '–°–ø–æ—Ä—Ç–æ–≤–∏', '–î—Ä–∂–∞–≤–µ', '–ë–æ—ò–µ'];
  const values = {
    '–û—Å–æ–±–µ': ['–ë—Ä–∞–Ω–∏—Å–ª–∞–≤', '–ò–≤–∞–Ω', '–à–æ–≤–∞–Ω', '–ú–∏–ª–∞–Ω', '–ü–µ—Ç–∞—Ä'],
    '–ê—É—Ç–æ–º–æ–±–∏–ª–∏': ['–¢–∞–∫—Å–∏', '–ê—É–¥–∏', '–à—É–≥–æ', '–§–∏–∞—Ç', '–§–æ—Ä–¥'],
    '–°–ø–æ—Ä—Ç–æ–≤–∏': ['–§—É–¥–±–∞–ª', '–†–≤–∞—ö–µ', '–®–∞—Ö', '–ö–æ—à–∞—Ä–∫–∞', '–ü–ª–∏–≤–∞—ö–µ'],
    '–î—Ä–∂–∞–≤–µ': ['–°—Ä–±–∏—ò–∞', '–§—Ä–∞–Ω—Ü—É—Å–∫–∞', '–†—É—Å–∏—ò–∞', '–ì—Ä—á–∫–∞', '–ö–∏–Ω–∞'],
    '–ë–æ—ò–µ': ['–¶—Ä–≤–µ–Ω–∞', '–ü–ª–∞–≤–∞', '–ñ—É—Ç–∞', '–ó–µ–ª–µ–Ω–∞', '–â—É–±–∏—á–∞—Å—Ç–∞']
  };

  for (const category of categories) {
    for (const value of values[category]) {
      // value —Å–µ –º–æ—Ä–∞ –ø–æ—ò–∞–≤–∏—Ç–∏ —É —Ç–∞—á–Ω–æ —ò–µ–¥–Ω–æ—ò –ø–æ–∑–∏—Ü–∏—ò–∏ (0‚Äì4)
      const vars = [];
      for (let pos = 0; pos < 5; pos++) {
        vars.push(`${category}:${pos}=${value}`);
      }
      constraints.push(solver.exactlyOne(vars));
    }

    for (let pos = 0; pos < 5; pos++) {
      // —Å–≤–∞–∫–∞ –ø–æ–∑–∏—Ü–∏—ò–∞ –∏–º–∞ —Ç–∞—á–Ω–æ —ò–µ–¥–Ω—É –≤—Ä–µ–¥–Ω–æ—Å—Ç
      const vars = values[category].map(value => `${category}:${pos}=${value}`);
      constraints.push(solver.exactlyOne(vars));
    }
  }

  return constraints;
}

export function solvePuzzle(extraConstraints = []) {
  const s = new solver.Solver();

  const allConstraints = getAllConstraints();
  allConstraints.forEach(clause => s.require(clause));
  extraConstraints.forEach(clause => s.require(clause));

  const rawSolution = s.solve(); // –¥–æ–±–∏—ò–∞–º–æ map-like –æ–±—ò–µ–∫–∞—Ç —Ä–µ—à–µ—ö–∞
  if (!rawSolution) return [];

  console.log("üì¶ Raw solution map:", rawSolution.getMap());

  const parsed = parseSolution(rawSolution.getMap());
  return [parsed];
}

function parseSolution(map) {
  const result = {};

  for (const key in map) {
    if (!map[key]) continue;
    const [category, pair] = key.split(':');
    const [index, value] = pair.split('=');

    if (!result[category]) {
      result[category] = [];
    }

    result[category][parseInt(index)] = value;
  }

  return result;
}

